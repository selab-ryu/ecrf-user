/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ecrf.user.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import ecrf.user.model.CRF;
import ecrf.user.model.CRFModel;
import ecrf.user.model.CRFSoap;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CRF service. Represents a row in the &quot;EC_CRF&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CRFModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CRFImpl}.
 * </p>
 *
 * @author Ryu W.C.
 * @see CRFImpl
 * @generated
 */
@JSON(strict = true)
public class CRFModelImpl extends BaseModelImpl<CRF> implements CRFModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a crf model instance should use the <code>CRF</code> interface instead.
	 */
	public static final String TABLE_NAME = "EC_CRF";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"crfId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"datatypeId", Types.BIGINT},
		{"managerId", Types.BIGINT}, {"applyDate", Types.TIMESTAMP},
		{"crfStatus", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("crfId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("datatypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("managerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("crfStatus", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EC_CRF (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,crfId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,datatypeId LONG,managerId LONG,applyDate DATE null,crfStatus INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table EC_CRF";

	public static final String ORDER_BY_JPQL =
		" ORDER BY crf.crfId ASC, crf.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EC_CRF.crfId ASC, EC_CRF.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long MANAGERID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long CRFID_COLUMN_BITMASK = 16L;

	public static final long CREATEDATE_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CRF toModel(CRFSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CRF model = new CRFImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setCrfId(soapModel.getCrfId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setDatatypeId(soapModel.getDatatypeId());
		model.setManagerId(soapModel.getManagerId());
		model.setApplyDate(soapModel.getApplyDate());
		model.setCrfStatus(soapModel.getCrfStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CRF> toModels(CRFSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CRF> models = new ArrayList<CRF>(soapModels.length);

		for (CRFSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CRFModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _crfId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCrfId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _crfId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CRF.class;
	}

	@Override
	public String getModelClassName() {
		return CRF.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CRF, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CRF, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CRF, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((CRF)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CRF, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CRF, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((CRF)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CRF, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CRF, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CRF, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CRF, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CRF, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CRF, Object>>();
		Map<String, BiConsumer<CRF, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CRF, ?>>();

		attributeGetterFunctions.put("mvccVersion", CRF::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion", (BiConsumer<CRF, Long>)CRF::setMvccVersion);
		attributeGetterFunctions.put("uuid", CRF::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<CRF, String>)CRF::setUuid);
		attributeGetterFunctions.put("crfId", CRF::getCrfId);
		attributeSetterBiConsumers.put(
			"crfId", (BiConsumer<CRF, Long>)CRF::setCrfId);
		attributeGetterFunctions.put("groupId", CRF::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<CRF, Long>)CRF::setGroupId);
		attributeGetterFunctions.put("companyId", CRF::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<CRF, Long>)CRF::setCompanyId);
		attributeGetterFunctions.put("userId", CRF::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<CRF, Long>)CRF::setUserId);
		attributeGetterFunctions.put("userName", CRF::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<CRF, String>)CRF::setUserName);
		attributeGetterFunctions.put("createDate", CRF::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<CRF, Date>)CRF::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", CRF::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<CRF, Date>)CRF::setModifiedDate);
		attributeGetterFunctions.put("status", CRF::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<CRF, Integer>)CRF::setStatus);
		attributeGetterFunctions.put("statusByUserId", CRF::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId", (BiConsumer<CRF, Long>)CRF::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", CRF::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<CRF, String>)CRF::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", CRF::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<CRF, Date>)CRF::setStatusDate);
		attributeGetterFunctions.put("datatypeId", CRF::getDatatypeId);
		attributeSetterBiConsumers.put(
			"datatypeId", (BiConsumer<CRF, Long>)CRF::setDatatypeId);
		attributeGetterFunctions.put("managerId", CRF::getManagerId);
		attributeSetterBiConsumers.put(
			"managerId", (BiConsumer<CRF, Long>)CRF::setManagerId);
		attributeGetterFunctions.put("applyDate", CRF::getApplyDate);
		attributeSetterBiConsumers.put(
			"applyDate", (BiConsumer<CRF, Date>)CRF::setApplyDate);
		attributeGetterFunctions.put("crfStatus", CRF::getCrfStatus);
		attributeSetterBiConsumers.put(
			"crfStatus", (BiConsumer<CRF, Integer>)CRF::setCrfStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCrfId() {
		return _crfId;
	}

	@Override
	public void setCrfId(long crfId) {
		_columnBitmask = -1L;

		_crfId = crfId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getDatatypeId() {
		return _datatypeId;
	}

	@Override
	public void setDatatypeId(long datatypeId) {
		_datatypeId = datatypeId;
	}

	@JSON
	@Override
	public long getManagerId() {
		return _managerId;
	}

	@Override
	public void setManagerId(long managerId) {
		_columnBitmask |= MANAGERID_COLUMN_BITMASK;

		if (!_setOriginalManagerId) {
			_setOriginalManagerId = true;

			_originalManagerId = _managerId;
		}

		_managerId = managerId;
	}

	public long getOriginalManagerId() {
		return _originalManagerId;
	}

	@JSON
	@Override
	public Date getApplyDate() {
		return _applyDate;
	}

	@Override
	public void setApplyDate(Date applyDate) {
		_applyDate = applyDate;
	}

	@JSON
	@Override
	public int getCrfStatus() {
		return _crfStatus;
	}

	@Override
	public void setCrfStatus(int crfStatus) {
		_crfStatus = crfStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CRF.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CRF.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CRF toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CRF> escapedModelProxyProviderFunction =
				EscapedModelProxyProviderFunctionHolder.
					_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CRFImpl crfImpl = new CRFImpl();

		crfImpl.setMvccVersion(getMvccVersion());
		crfImpl.setUuid(getUuid());
		crfImpl.setCrfId(getCrfId());
		crfImpl.setGroupId(getGroupId());
		crfImpl.setCompanyId(getCompanyId());
		crfImpl.setUserId(getUserId());
		crfImpl.setUserName(getUserName());
		crfImpl.setCreateDate(getCreateDate());
		crfImpl.setModifiedDate(getModifiedDate());
		crfImpl.setStatus(getStatus());
		crfImpl.setStatusByUserId(getStatusByUserId());
		crfImpl.setStatusByUserName(getStatusByUserName());
		crfImpl.setStatusDate(getStatusDate());
		crfImpl.setDatatypeId(getDatatypeId());
		crfImpl.setManagerId(getManagerId());
		crfImpl.setApplyDate(getApplyDate());
		crfImpl.setCrfStatus(getCrfStatus());

		crfImpl.resetOriginalValues();

		return crfImpl;
	}

	@Override
	public int compareTo(CRF crf) {
		int value = 0;

		if (getCrfId() < crf.getCrfId()) {
			value = -1;
		}
		else if (getCrfId() > crf.getCrfId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getCreateDate(), crf.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CRF)) {
			return false;
		}

		CRF crf = (CRF)object;

		long primaryKey = crf.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;

		_originalManagerId = _managerId;

		_setOriginalManagerId = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CRF> toCacheModel() {
		CRFCacheModel crfCacheModel = new CRFCacheModel();

		crfCacheModel.mvccVersion = getMvccVersion();

		crfCacheModel.uuid = getUuid();

		String uuid = crfCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			crfCacheModel.uuid = null;
		}

		crfCacheModel.crfId = getCrfId();

		crfCacheModel.groupId = getGroupId();

		crfCacheModel.companyId = getCompanyId();

		crfCacheModel.userId = getUserId();

		crfCacheModel.userName = getUserName();

		String userName = crfCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			crfCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			crfCacheModel.createDate = createDate.getTime();
		}
		else {
			crfCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			crfCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			crfCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		crfCacheModel.status = getStatus();

		crfCacheModel.statusByUserId = getStatusByUserId();

		crfCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = crfCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			crfCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			crfCacheModel.statusDate = statusDate.getTime();
		}
		else {
			crfCacheModel.statusDate = Long.MIN_VALUE;
		}

		crfCacheModel.datatypeId = getDatatypeId();

		crfCacheModel.managerId = getManagerId();

		Date applyDate = getApplyDate();

		if (applyDate != null) {
			crfCacheModel.applyDate = applyDate.getTime();
		}
		else {
			crfCacheModel.applyDate = Long.MIN_VALUE;
		}

		crfCacheModel.crfStatus = getCrfStatus();

		return crfCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CRF, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CRF, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CRF, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CRF)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CRF, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CRF, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CRF, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CRF)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CRF>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CRF.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private String _uuid;
	private String _originalUuid;
	private long _crfId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _datatypeId;
	private long _managerId;
	private long _originalManagerId;
	private boolean _setOriginalManagerId;
	private Date _applyDate;
	private int _crfStatus;
	private long _columnBitmask;
	private CRF _escapedModel;

}